const passport = require("passport");
// const FacebookStrategy = require("passport-facebook").Strategy;
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const Twitter = require("passport-twitter").Strategy;
const db = require("../models");

passport.serializeUser((user, done) => {
  done(null, user.id); //'_id' id generated by 'mongodb user model id'
});
passport.deserializeUser((id, done) => {
  db.userModel.findById(id).then(user => {
    done(null, user);
  });
});

let authProcessorTwitter = (accessToken, refreshToken, profile, done) => {
  // Find a user in the local db using profile.id
  // If the user is found, return the user data using the "done()" method
  //If the user is not found, create one in the local db and return
  db.userModel
    .findOne({ "social.tw.profileId": profile.id })
    .then(existingUser => {
      if (existingUser) {
        //we already have a record with the given profile ID
        done(null, existingUser);
        console.log("error", " new user: " + existingUser);
      } else {
        const newUser = new db.userModel();
        newUser.social.tw.profileId = profile.id;
        newUser.social.tw.fullName = profile.displayName;
        newUser.social.tw.profilePic = profile.photos[0].value || "";
        newUser
          .save()
          .then(user => done(null, user))
          .catch(error =>
            console.log("error", "Error when creating new user: " + error)
          );
      }
    });
};

let authProcessorGoogle = (accessToken, refreshToken, profile, done) => {
  // Find a user in the local db using profile.id
  // If the user is found, return the user data using the "done()" method
  //If the user is not found, create one in the local db and return
  db.userModel
    .findOne({ "social.google.profileId": profile.id })
    .then(existingUser => {
      if (existingUser) {
        //we already have a record with the given profile ID
        done(null, existingUser);
        console.log("error", " new user: " + existingUser);
      } else {
        const newUser = new db.userModel();
        newUser.social.google.profileId = profile.id;
        newUser.social.google.fullName = profile.displayName;
        newUser.social.google.profilePic = profile.photos[0].value || "";
        newUser
          .save()
          .then(user => done(null, user))
          .catch(error =>
            console.log("error", "Error when creating new user: " + error)
          );
      }
    });
};

passport.use(db.userModel.createStrategy());

passport.use(
  new Twitter(
    {
      clientID: process.env.twConsumerKey,
      clientSecret: process.env.twConsumerSecret,
      callbackURL: process.env.host + "/auth/twitter/callback",
      profileFields: ["id", "displayName", "emails", "photos"]
    },
    authProcessorTwitter
  )
);

passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: process.env.host + "/auth/google/callback",
      proxy: true
    },
    authProcessorGoogle
  )
);
